#!/usr/bin/env python

# Dumps OMERO.biobank data to the persistent graph engine
# (this script is useless when your graph engine is "pygraph")

import argparse

from bl.vl.utils import LOG_LEVELS, get_logger
from bl.vl.kb import KnowledgeBase as KB


class GraphDumper(object):
    def __init__(self, kb, logger):
        self.kb = kb
        self.logger = logger
        self.node_classes = [
            kb.Individual,
            kb.Vessel,
            kb.DataSample,
            kb.VLCollection,
            kb.LaneSlot,
        ]
        self.relationship_classes = {
            kb.DataCollectionItem: 'dataSample',
            kb.VesselsCollectionItem: 'vessel',
        }

        self.collection_classes = [
            kb.DataCollectionItem,
            kb.VesselsCollectionItem,
            kb.PlateWell,
            kb.Lane,
            kb.LaneSlot,
            kb.IlluminaBeadChipMeasures,
        ]

    def __get_nodes__(self):
        nodes = []
        for nc in self.node_classes:
            self.logger.info('Loading %s objects and subclasses',  nc.__name__)
            # ignore objects stored in the common space if they don't belong to the current sandbox
            objs = [o for o in self.kb.get_objects(nc) if o.in_current_sandbox()]
            self.logger.info('Loaded %d objects', len(objs))
            nodes.extend(objs)
        return nodes

    def __get_edges__(self, nodes):
        edges = []
        self.logger.info('Loading actions')
        try:
            acts = self.kb.get_objects(self.kb.Action)
        except Exception:
            # Ice memory error
            self.kb.disconnect()
            self.kb.connect()
            acts = [n.action for n in nodes if hasattr(n.action, 'target')]
        self.logger.info('Loaded %d actions', len(acts))
        self.logger.info('Building edges data')
        for n in nodes:
            if hasattr(n.action, 'target'):
                act = n.action
                if type(act.target) in self.relationship_classes:
                    src = getattr(act.target, self.relationship_classes[type(act.target)])
                else:
                    src = act.target
                edges.append({'action': act, 'source': src, 'target': n})
        return edges

    def __get_collection_info__(self, item):
        if issubclass(type(item), self.kb.DataCollectionItem):
            return [
                {'item': item.dataSample, 'collection': item.dataCollection}
            ]
        elif issubclass(type(item), self.kb.VesselsCollectionItem):
            return [
                {'item': item.vessel, 'collection': item.vesselsCollection}
            ]
        elif issubclass(type(item), self.kb.PlateWell):
            return [
                {'item': item, 'collection': item.container}
            ]
        elif issubclass(type(item), self.kb.Lane):
            return [
                {'item': item, 'collection': item.flowCell}
            ]
        elif issubclass(type(item), self.kb.LaneSlot):
            return [
                {'item': item, 'collection': item.lane}
            ]
        elif issubclass(type(item), self.kb.IlluminaBeadChipMeasures):
            return [
                {'item': item.redChannel, 'collection': item},
                {'item': item.greenChannel, 'collection': item}
            ]
        else:
            msg = "Item %s is not a collection" % type(item)
            raise ValueError(msg)

    def __get_collections__(self):
        collections = []
        for cc in self.collection_classes:
            self.logger.info('Loading collections for %s and subclasses', cc.__name__)
            objs = [o for o in self.kb.get_objects(cc) if o.in_current_sandbox()]
            self.logger.info('Loaded %d objects', len(objs))
            for ci in objs:
                collections.extend(self.__get_collection_info__(ci))
        return collections

    def __save_node__(self, node):
        self.logger.debug('NODE --> %s::%s', type(node), node.id)
        self.kb.dt.create_node(node)

    def save_nodes(self):
        nodes = self.__get_nodes__()
        self.logger.info('Saving %d nodes', len(nodes))
        for n in nodes:
            self.__save_node__(n)
        self.logger.info('Done saving nodes')
        return nodes

    def __save_edge__(self, action, source, destination):
        self.logger.debug('EDGE --> action %s::%s  source %s::%s  target %s::%s',
                          type(action), action.omero_id,
                          type(source), source.id,
                          type(destination), destination.id)
        self.kb.dt.create_edge(action, source, destination)

    def save_edges(self, nodes):
        edges = self.__get_edges__(nodes)
        self.logger.info('Saving %d edges', len(edges))
        for e in edges:
            self.__save_edge__(e['action'], e['source'], e['target'])
        self.logger.info('Done saving edges')

    def __save_collection_item__(self, item, collection):
        self.logger.debug('ITEM --> %s::%s COLLECTION --> %s:%s',
                          type(item), item.id,
                          type(collection), collection.id)
        self.kb.dt.create_collection_item(item, collection)

    def save_collections(self):
        collections = self.__get_collections__()
        self.logger.info('Saving %d collections items', len(collections))
        for ci in collections:
            self.__save_collection_item__(ci['item'], ci['collection'])
        self.logger.info('Done saving collections items')

    def dump(self):
        nodes = self.save_nodes()
        self.save_edges(nodes)
        self.save_collections()


def make_parser():
    parser = argparse.ArgumentParser(description='Load existing data from an OMERO server and dump to its graph engine')
    parser.add_argument('--logfile', type=str, help='log file (default=stderr)')
    parser.add_argument('--loglevel', type=str, choices=LOG_LEVELS,
                        help='logging_level', default='INFO')
    parser.add_argument('-H', '--host', type=str, help='omero hostname',
                        required=True)
    parser.add_argument('-U', '--user', type=str, help='omero user',
                        required=True)
    parser.add_argument('-P', '--passwd', type=str, help='omero password',
                        required=True)
    return parser


def main():
    parser = make_parser()
    args = parser.parse_args()

    logger = get_logger(__name__, level=args.loglevel, filename=args.logfile)

    kb = KB(driver='omero')(args.host, args.user, args.passwd)

    dumper = GraphDumper(kb, logger)
    dumper.dump()


if __name__ == '__main__':
    main()
