#!/usr/bin/env python

import argparse, sys

from bl.vl.utils import LOG_LEVELS, get_logger
from bl.vl.kb import KnowledgeBase as KB
from bl.vl.kb import KBError


def make_parser():
    parser = argparse.ArgumentParser('Delete all data related to a specific user from an OMERO server')
    parser.add_argument('--logfile', type=str, help='log file (default=stderr)')
    parser.add_argument('--loglevel', type=str, choices=LOG_LEVELS,
                        help='logging level', default='INFO')
    parser.add_argument('--host', '-H', type=str, help='OMERO host',
                        required=True)
    parser.add_argument('--user', '-U', type=str, help='OMERO user',
                        required=True)
    parser.add_argument('--passwd', '-P', type=str, help='OMERO password',
                        required=True)
    parser.add_argument('--clear-studies', action='store_true',
                        help='clear Study objects at the end')
    parser.add_argument('--clear-devices', action='store_true',
                        help='clear Device objects at the end')
    parser.add_argument('--do-it', action='store_true',
                        help='confirm that you want to delete all data from the database')
    return parser


def get_data(kb, logger):
    obj_classes = [kb.Individual, kb.Enrollment, kb.Vessel,
                   kb.DataObject, kb.DataSample,
                   kb.VLCollection, kb.DataCollectionItem,
                   kb.VesselsCollectionItem, kb.LaneSlot]
    logger.info('Loading data')
    objects = []
    for o in obj_classes:
        elements = kb.get_objects(o)
        logger.info('Type %s --- Loaded %d items' % (o.__name__, len(elements)))
        objects.extend(elements)
    actions = kb.get_objects(kb.Action)
    logger.info('Type %s --- Loaded %d items' % (kb.Action.__name__, len(actions)))
    return objects, actions


def delete(kb, objects, actions, logger):
    logger.info('Objects to delete: %d' % len(objects))
    undeleted_objs = []
    for o in objects:
        try:
            kb.delete(o)
        except KBError:
            undeleted_objs.append(o)
    logger.info('%d objects deleted' % (len(objects) - len(undeleted_objs)))
    logger.info('Actions to delete: %d' % len(actions))
    undeleted_acts = []
    for a in actions:
        try:
            if a.setup:
                kb.delete(a.setup)
        except KBError:
            # different actions can have the same configuration objects, ignore if can't delete
            pass
        try:
            kb.delete(a)
        except KBError:
            undeleted_acts.append(a)
    logger.info('%d actions deleted' % (len(actions) - len(undeleted_acts)))
    return undeleted_objs, undeleted_acts


def cleanup(kb, clear_studies, clear_devices, logger):
    # Remove ActionSetup objects that are still present into the system
    setup_objs = kb.get_objects(kb.ActionSetup)
    logger.info('ActionSetup to delete: %d' % len(setup_objs))
    for s in setup_objs:
        kb.delete(s)
    logger.info('ActionSetup objects deleted')
    if clear_studies:
        studies = kb.get_objects(kb.Study)
        logger.info('Study to delete: %d' % len(studies))
        for s in studies:
            kb.delete(s)
        logger.info('Study objects deleted')
    if clear_devices:
        devices = kb.get_objects(kb.Device)
        logger.info('Devices to delete: %d' % len(devices))
        for d in devices:
            kb.delete(d)
        logger.info('Device objects deleted')


def main(argv):
    parser = make_parser()
    args = parser.parse_args(argv)

    logger = get_logger("main", level=args.loglevel, filename=args.logfile)
    logger.info('--- Starting job ---')

    kb = KB(driver='omero')(args.host, args.user, args.passwd)

    objects, actions = get_data(kb, logger)

    if not args.do_it:
        logger.info('Need confirm to delete all data, use the --do-it flag to give')
        sys.exit(0)
    else:
        iteration = 1
        while len(objects) > 0 or len(actions) > 0:
            logger.info('***** Delete iteration %d *****' % iteration)
            objects, actions = delete(kb, objects, actions, logger)
            iteration += 1

    logger.info('***** Cleaning remaining data *****')
    cleanup(kb, args.clear_studies, args.clear_devices, logger)

    logger.info('--- Job completed ---')

if __name__ == '__main__':
    main(sys.argv[1:])
